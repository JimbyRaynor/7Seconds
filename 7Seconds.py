import math
import sys
import os
import time
from tkinter import * 

sys.path.insert(0, "/home/deck/Documents") # needed to load LEDlib
import LEDlib

# for loading files (.png, .txt), set current directory = location of this python script (needed for Linux)
current_script_directory = os.path.dirname(os.path.abspath(__file__))
os.chdir(current_script_directory)

# TODO
# level 0 for demo + title + instructions
# LED VERTICAL STRIP RED bottom, ORANGE middle, GREEN top. LOOK at pinball
# RED LED : okay score
# ORANGE : GOOD
# GREEN : Very GOOd (test tube filling meter?)
# math symbols and identities for levels
# icon buttons at botton for choosing levels
# 2x flags
# 2x+1 flags


# pinball like? bouncers, speed increasers, ?
# moving walls/obsticles? -> moving away from original idea. Not a platformer


charRallyX = [(0,14,"#4C3A23"), (0,15,"#4C3A23"), (0,16,"#4C3A23"), (0,17,"#4C3A23"), (0,18,"#4C3A23"), (0,19,"#4C3A23"), (0,20,"#4C3A23"), (1,13,"#4C3A23"), (1,14,"#4C3A23"), (1,15,"#4C3A23"), (1,16,"#4C3A23"), (1,17,"#4C3A23"), (1,18,"#4C3A23"), (1,19,"#4C3A23"), (1,20,"#4C3A23"), (1,21,"#4C3A23"), (2,2,"#4C3A23"), (2,3,"#4C3A23"), (2,4,"#4C3A23"), (2,5,"#4C3A23"), (2,6,"#4C3A23"), (2,13,"#4C3A23"), (2,14,"#4C3A23"), (2,15,"#4C3A23"), (2,16,"#4C3A23"), (2,17,"#4C3A23"), (2,18,"#4C3A23"), (2,19,"#4C3A23"), (2,20,"#4C3A23"), (2,21,"#4C3A23"), (3,1,"#4C3A23"), (3,2,"#4C3A23"), (3,3,"#4C3A23"), (3,4,"#4C3A23"), (3,5,"#4C3A23"), (3,6,"#4C3A23"), (3,7,"#4C3A23"), (3,13,"#4C3A23"), (3,14,"#4C3A23"), (3,15,"#4C3A23"), (3,16,"#4C3A23"), (3,17,"#4C3A23"), (3,18,"#4C3A23"), (3,19,"#4C3A23"), (3,20,"#4C3A23"), (3,21,"#4C3A23"), (4,1,"#4C3A23"), (4,2,"#4C3A23"), (4,3,"#4C3A23"), (4,4,"#4C3A23"), (4,5,"#4C3A23"), (4,6,"#4C3A23"), (4,7,"#4C3A23"), (4,13,"#4C3A23"), (4,14,"#4C3A23"), (4,15,"#4C3A23"), (4,16,"#4C3A23"), (4,17,"#4C3A23"), (4,18,"#4C3A23"), (4,19,"#4C3A23"), (4,20,"#4C3A23"), (4,21,"#4C3A23"), (5,1,"#4C3A23"), (5,2,"#4C3A23"), (5,3,"#4C3A23"), (5,4,"#4C3A23"), (5,5,"#4C3A23"), (5,6,"#4C3A23"), (5,7,"#4C3A23"), (5,13,"#4C3A23"), (5,14,"#4C3A23"), (5,15,"#4C3A23"), (5,16,"#4C3A23"), (5,17,"#4C3A23"), (5,18,"#4C3A23"), (5,19,"#4C3A23"), (5,20,"#4C3A23"), (5,21,"#4C3A23"), (6,1,"#4C3A23"), (6,2,"#4C3A23"), (6,3,"#4C3A23"), (6,4,"#4C3A23"), (6,5,"#4C3A23"), (6,6,"#4C3A23"), (6,7,"#4C3A23"), (6,14,"#4C3A23"), (6,15,"#4C3A23"), (6,16,"#4C3A23"), (6,17,"#4C3A23"), (6,18,"#4C3A23"), (6,19,"#4C3A23"), (6,20,"#4C3A23"), (7,2,"#4C3A23"), (7,3,"#4C3A23"), (7,4,"#4C3A23"), (7,5,"#4C3A23"), (7,6,"#4C3A23"), (7,17,"#FFA07A"), (8,4,"#FFA07A"), (8,10,"#FFA07A"), (8,11,"#FFA07A"), (8,12,"#FFA07A"), (8,13,"#FFA07A"), (8,14,"#FFA07A"), (8,15,"#FFA07A"), (8,16,"#FFA07A"), (8,17,"#FFA07A"), (8,18,"#FFA07A"), (8,19,"#8B4513"), (8,20,"#8B4513"), (8,21,"#FF0000"), (8,22,"#FFFF00"), (8,23,"#FF0000"), (9,4,"#FFA07A"), (9,8,"#FFA07A"), (9,9,"#FFA07A"), (9,10,"#FFA07A"), (9,11,"#FFA07A"), (9,12,"#FFA07A"), (9,13,"#FFA07A"), (9,14,"#FFA07A"), (9,15,"#FFA07A"), (9,16,"#FFA07A"), (9,17,"#FFA07A"), (9,18,"#FFA07A"), (9,19,"#FFA07A"), (9,20,"#8B4513"), (9,21,"#8B4513"), (9,22,"#FF0000"), (9,23,"#FFFF00"), (10,1,"#FFA07A"), (10,2,"#FFA07A"), (10,3,"#FFA07A"), (10,4,"#FFA07A"), (10,5,"#FFA07A"), (10,6,"#FFA07A"), (10,7,"#FFA07A"), (10,8,"#FFA07A"), (10,9,"#FFA07A"), (10,10,"#FFA07A"), (10,11,"#AAAAAA"), (10,12,"#AAAAAA"), (10,13,"#AAAAAA"), (10,14,"#AAAAAA"), (10,15,"#AAAAAA"), (10,16,"#AAAAAA"), (10,17,"#FFA07A"), (10,18,"#FFA07A"), (10,19,"#FFA07A"), (10,20,"#FFA07A"), (11,0,"#FFA07A"), (11,1,"#FFA07A"), (11,2,"#FFA07A"), (11,3,"#FFA07A"), (11,4,"#FFA07A"), (11,5,"#FFA07A"), (11,6,"#FFA07A"), (11,7,"#FFA07A"), (11,8,"#FFA07A"), (11,9,"#FFA07A"), (11,10,"#AAAAAA"), (11,11,"#B5B3F5"), (11,12,"#FFFFFF"), (11,13,"#FFFFFF"), (11,14,"#FFFFFF"), (11,15,"#FFFFFF"), (11,16,"#B5B3F5"), (11,17,"#AAAAAA"), (11,18,"#FFA07A"), (11,19,"#FFA07A"), (11,20,"#FFA07A"), (12,0,"#FFA07A"), (12,1,"#FFA07A"), (12,2,"#FFA07A"), (12,3,"#FFA07A"), (12,4,"#FFA07A"), (12,5,"#FFA07A"), (12,6,"#FFA07A"), (12,7,"#FFA07A"), (12,8,"#FFA07A"), (12,9,"#FFA07A"), (12,10,"#AAAAAA"), (12,11,"#B5B3F5"), (12,12,"#FFFFFF"), (12,13,"#FFFFFF"), (12,14,"#FFFFFF"), (12,15,"#FFFFFF"), (12,16,"#B5B3F5"), (12,17,"#AAAAAA"), (12,18,"#FFA07A"), (12,19,"#FFA07A"), (12,20,"#FFA07A"), (13,1,"#FFA07A"), (13,2,"#FFA07A"), (13,3,"#FFA07A"), (13,4,"#FFA07A"), (13,5,"#FFA07A"), (13,6,"#FFA07A"), (13,7,"#FFA07A"), (13,8,"#FFA07A"), (13,9,"#FFA07A"), (13,10,"#FFA07A"), (13,11,"#AAAAAA"), (13,12,"#AAAAAA"), (13,13,"#AAAAAA"), (13,14,"#AAAAAA"), (13,15,"#AAAAAA"), (13,16,"#AAAAAA"), (13,17,"#FFA07A"), (13,18,"#FFA07A"), (13,19,"#FFA07A"), (13,20,"#FFA07A"), (14,4,"#FFA07A"), (14,8,"#FFA07A"), (14,9,"#FFA07A"), (14,10,"#FFA07A"), (14,11,"#FFA07A"), (14,12,"#FFA07A"), (14,13,"#FFA07A"), (14,14,"#FFA07A"), (14,15,"#FFA07A"), (14,16,"#FFA07A"), (14,17,"#FFA07A"), (14,18,"#FFA07A"), (14,19,"#FFA07A"), (14,20,"#8B4513"), (14,21,"#8B4513"), (14,22,"#FF0000"), (14,23,"#FFFF00"), (15,4,"#FFA07A"), (15,10,"#FFA07A"), (15,11,"#FFA07A"), (15,12,"#FFA07A"), (15,13,"#FFA07A"), (15,14,"#FFA07A"), (15,15,"#FFA07A"), (15,16,"#FFA07A"), (15,17,"#FFA07A"), (15,18,"#FFA07A"), (15,19,"#8B4513"), (15,20,"#8B4513"), (15,21,"#FF0000"), (15,22,"#FFFF00"), (15,23,"#FF0000"), (16,2,"#4C3A23"), (16,3,"#4C3A23"), (16,4,"#4C3A23"), (16,5,"#4C3A23"), (16,6,"#4C3A23"), (16,17,"#FFA07A"), (17,1,"#4C3A23"), (17,2,"#4C3A23"), (17,3,"#4C3A23"), (17,4,"#4C3A23"), (17,5,"#4C3A23"), (17,6,"#4C3A23"), (17,7,"#4C3A23"), (17,14,"#4C3A23"), (17,15,"#4C3A23"), (17,16,"#4C3A23"), (17,17,"#4C3A23"), (17,18,"#4C3A23"), (17,19,"#4C3A23"), (17,20,"#4C3A23"), (18,1,"#4C3A23"), (18,2,"#4C3A23"), (18,3,"#4C3A23"), (18,4,"#4C3A23"), (18,5,"#4C3A23"), (18,6,"#4C3A23"), (18,7,"#4C3A23"), (18,13,"#4C3A23"), (18,14,"#4C3A23"), (18,15,"#4C3A23"), (18,16,"#4C3A23"), (18,17,"#4C3A23"), (18,18,"#4C3A23"), (18,19,"#4C3A23"), (18,20,"#4C3A23"), (18,21,"#4C3A23"), (19,1,"#4C3A23"), (19,2,"#4C3A23"), (19,3,"#4C3A23"), (19,4,"#4C3A23"), (19,5,"#4C3A23"), (19,6,"#4C3A23"), (19,7,"#4C3A23"), (19,13,"#4C3A23"), (19,14,"#4C3A23"), (19,15,"#4C3A23"), (19,16,"#4C3A23"), (19,17,"#4C3A23"), (19,18,"#4C3A23"), (19,19,"#4C3A23"), (19,20,"#4C3A23"), (19,21,"#4C3A23"), (20,1,"#4C3A23"), (20,2,"#4C3A23"), (20,3,"#4C3A23"), (20,4,"#4C3A23"), (20,5,"#4C3A23"), (20,6,"#4C3A23"), (20,7,"#4C3A23"), (20,13,"#4C3A23"), (20,14,"#4C3A23"), (20,15,"#4C3A23"), (20,16,"#4C3A23"), (20,17,"#4C3A23"), (20,18,"#4C3A23"), (20,19,"#4C3A23"), (20,20,"#4C3A23"), (20,21,"#4C3A23"), (21,2,"#4C3A23"), (21,3,"#4C3A23"), (21,4,"#4C3A23"), (21,5,"#4C3A23"), (21,6,"#4C3A23"), (21,13,"#4C3A23"), (21,14,"#4C3A23"), (21,15,"#4C3A23"), (21,16,"#4C3A23"), (21,17,"#4C3A23"), (21,18,"#4C3A23"), (21,19,"#4C3A23"), (21,20,"#4C3A23"), (21,21,"#4C3A23"), (22,13,"#4C3A23"), (22,14,"#4C3A23"), (22,15,"#4C3A23"), (22,16,"#4C3A23"), (22,17,"#4C3A23"), (22,18,"#4C3A23"), (22,19,"#4C3A23"), (22,20,"#4C3A23"), (22,21,"#4C3A23"), (23,14,"#4C3A23"), (23,15,"#4C3A23"), (23,16,"#4C3A23"), (23,17,"#4C3A23"), (23,18,"#4C3A23"), (23,19,"#4C3A23"), (23,20,"#4C3A23")]
charPopsicle = [(0,1,"#8B4513"), (0,2,"#8B4513"), (0,3,"#8B4513"), (0,4,"#8B4513"), (0,5,"#8B4513"), (0,6,"#8B4513"), (0,7,"#8B4513"), (0,8,"#8B4513"), (0,9,"#8B4513"), (0,10,"#8B4513"), (0,11,"#8B4513"), (1,0,"#8B4513"), (1,1,"#8B4513"), (1,2,"#FFFFFF"), (1,3,"#FFFFFF"), (1,4,"#FFFFFF"), (1,5,"#8B4513"), (1,6,"#8B4513"), (1,7,"#8B4513"), (1,8,"#8B4513"), (1,9,"#8B4513"), (1,10,"#8B4513"), (1,11,"#FFFFFF"), (1,12,"#FFFFFF"), (2,0,"#8B4513"), (2,1,"#8B4513"), (2,2,"#8B4513"), (2,3,"#8B4513"), (2,4,"#8B4513"), (2,5,"#8B4513"), (2,6,"#8B4513"), (2,7,"#8B4513"), (2,8,"#8B4513"), (2,9,"#8B4513"), (2,10,"#8B4513"), (2,11,"#8B4513"), (2,12,"#FFFFFF"), (3,0,"#8B4513"), (3,1,"#8B4513"), (3,2,"#8B4513"), (3,3,"#8B4513"), (3,4,"#8B4513"), (3,5,"#8B4513"), (3,6,"#8B4513"), (3,7,"#8B4513"), (3,8,"#8B4513"), (3,9,"#8B4513"), (3,10,"#8B4513"), (3,11,"#FFFFFF"), (3,12,"#FFFFFF"), (3,13,"#C19153"), (3,14,"#C19153"), (3,15,"#C19153"), (3,16,"#C19153"), (3,17,"#C19153"), (4,0,"#8B4513"), (4,1,"#8B4513"), (4,2,"#8B4513"), (4,3,"#8B4513"), (4,4,"#8B4513"), (4,5,"#8B4513"), (4,6,"#8B4513"), (4,7,"#8B4513"), (4,8,"#8B4513"), (4,9,"#8B4513"), (4,10,"#8B4513"), (4,11,"#8B4513"), (4,12,"#FFFFFF"), (4,13,"#C19153"), (4,14,"#C19153"), (4,15,"#C19153"), (4,16,"#C19153"), (4,17,"#C19153"), (5,0,"#8B4513"), (5,1,"#8B4513"), (5,2,"#8B4513"), (5,3,"#8B4513"), (5,4,"#8B4513"), (5,5,"#8B4513"), (5,6,"#8B4513"), (5,7,"#8B4513"), (5,8,"#8B4513"), (5,9,"#8B4513"), (5,10,"#8B4513"), (5,11,"#8B4513"), (5,12,"#FFFFFF"), (6,0,"#8B4513"), (6,1,"#8B4513"), (6,2,"#8B4513"), (6,3,"#8B4513"), (6,4,"#8B4513"), (6,5,"#8B4513"), (6,6,"#8B4513"), (6,7,"#8B4513"), (6,8,"#8B4513"), (6,9,"#8B4513"), (6,10,"#8B4513"), (6,11,"#FFFFFF"), (6,12,"#FFFFFF"), (7,1,"#8B4513"), (7,2,"#8B4513"), (7,3,"#8B4513"), (7,4,"#8B4513"), (7,5,"#8B4513"), (7,6,"#8B4513"), (7,7,"#8B4513"), (7,8,"#8B4513"), (7,9,"#8B4513"), (7,10,"#8B4513"), (7,11,"#8B4513")]
charPacmanStrawberry = [(0,6,"#FF0000"), (0,7,"#FF0000"), (0,8,"#FF0000"), (0,9,"#FF0000"), (1,5,"#FF0000"), (1,6,"#FF0000"), (1,7,"#FFFFFF"), (1,8,"#FF0000"), (1,9,"#FF0000"), (1,10,"#FF0000"), (1,11,"#FF0000"), (2,4,"#279627"), (2,5,"#FF0000"), (2,6,"#FF0000"), (2,7,"#FF0000"), (2,8,"#FF0000"), (2,9,"#FF0000"), (2,10,"#FFFFFF"), (2,11,"#FF0000"), (2,12,"#FF0000"), (3,4,"#279627"), (3,5,"#279627"), (3,6,"#FF0000"), (3,7,"#FF0000"), (3,8,"#FFFFFF"), (3,9,"#FF0000"), (3,10,"#FF0000"), (3,11,"#FF0000"), (3,12,"#FF0000"), (3,13,"#FF0000"), (4,4,"#279627"), (4,5,"#279627"), (4,6,"#FF0000"), (4,7,"#FF0000"), (4,8,"#FF0000"), (4,9,"#FF0000"), (4,10,"#FF0000"), (4,11,"#FF0000"), (4,12,"#FFFFFF"), (4,13,"#FF0000"), (5,3,"#FFFFFF"), (5,4,"#FFFFFF"), (5,5,"#279627"), (5,6,"#279627"), (5,7,"#FF0000"), (5,8,"#FFFFFF"), (5,9,"#FF0000"), (5,10,"#FFFFFF"), (5,11,"#FF0000"), (5,12,"#FF0000"), (5,13,"#FF0000"), (5,14,"#FF0000"), (6,4,"#279627"), (6,5,"#279627"), (6,6,"#FF0000"), (6,7,"#FF0000"), (6,8,"#FF0000"), (6,9,"#FF0000"), (6,10,"#FF0000"), (6,11,"#FF0000"), (6,12,"#FF0000"), (6,13,"#FF0000"), (7,4,"#279627"), (7,5,"#279627"), (7,6,"#FF0000"), (7,7,"#FFFFFF"), (7,8,"#FF0000"), (7,9,"#FF0000"), (7,10,"#FF0000"), (7,11,"#FF0000"), (7,12,"#FFFFFF"), (7,13,"#FF0000"), (8,4,"#279627"), (8,5,"#FF0000"), (8,6,"#FF0000"), (8,7,"#FF0000"), (8,8,"#FF0000"), (8,9,"#FFFFFF"), (8,10,"#FF0000"), (8,11,"#FF0000"), (9,5,"#FF0000"), (9,6,"#FFFFFF"), (9,7,"#FF0000"), (9,8,"#FF0000"), (9,9,"#FF0000"), (9,10,"#FF0000"), (9,11,"#FF0000"), (10,6,"#FF0000"), (10,7,"#FF0000"), (10,8,"#FF0000"), (10,9,"#FF0000")]
charChips = [(0,2,"#C19153"), (0,4,"#C19153"), (0,7,"#8B4513"), (1,3,"#C19153"), (1,4,"#C19153"), (1,5,"#C19153"), (1,6,"#FF5900"), (1,7,"#FF0000"), (1,8,"#FF0000"), (1,9,"#FF0000"), (1,10,"#8B4513"), (1,11,"#8B4513"), (2,1,"#C19153"), (2,2,"#C19153"), (2,5,"#C19153"), (2,6,"#C19153"), (2,7,"#FF0000"), (2,8,"#FF0000"), (2,9,"#FF0000"), (2,10,"#FF0000"), (2,11,"#FF0000"), (2,12,"#FF0000"), (2,13,"#FF0000"), (2,14,"#8B4513"), (2,15,"#8B4513"), (3,3,"#C19153"), (3,4,"#C19153"), (3,5,"#C19153"), (3,6,"#FF0000"), (3,7,"#FF0000"), (3,8,"#FF0000"), (3,9,"#FFFF00"), (3,10,"#FFFF00"), (3,11,"#FFFF00"), (3,12,"#FF0000"), (3,13,"#FF0000"), (3,14,"#FF0000"), (3,15,"#FF0000"), (4,0,"#C19153"), (4,1,"#C19153"), (4,2,"#FF5900"), (4,3,"#FF5900"), (4,4,"#FF5900"), (4,5,"#FF5900"), (4,6,"#FF0000"), (4,7,"#FF0000"), (4,8,"#FF0000"), (4,9,"#FF0000"), (4,10,"#FF0000"), (4,11,"#FF0000"), (4,12,"#FFFF00"), (4,13,"#FF0000"), (4,14,"#FF0000"), (4,15,"#FF0000"), (5,1,"#C19153"), (5,3,"#FF5900"), (5,4,"#C19153"), (5,5,"#C19153"), (5,6,"#FF0000"), (5,7,"#FF0000"), (5,8,"#FF0000"), (5,9,"#FFFF00"), (5,10,"#FFFF00"), (5,11,"#FFFF00"), (5,12,"#FF0000"), (5,13,"#FF0000"), (5,14,"#FF0000"), (5,15,"#FF0000"), (6,2,"#C19153"), (6,3,"#C19153"), (6,5,"#FF5900"), (6,6,"#FF0000"), (6,7,"#FF0000"), (6,8,"#FF0000"), (6,9,"#FF0000"), (6,10,"#FF0000"), (6,11,"#FF0000"), (6,12,"#FFFF00"), (6,13,"#FF0000"), (6,14,"#FF0000"), (6,15,"#FF0000"), (7,0,"#C19153"), (7,1,"#C19153"), (7,4,"#C19153"), (7,5,"#C19153"), (7,6,"#FF0000"), (7,7,"#FF0000"), (7,8,"#FF0000"), (7,9,"#FFFF00"), (7,10,"#FFFF00"), (7,11,"#FFFF00"), (7,12,"#FF0000"), (7,13,"#FF0000"), (7,14,"#FF0000"), (7,15,"#FF0000"), (8,2,"#C19153"), (8,3,"#C19153"), (8,5,"#C19153"), (8,6,"#FF5900"), (8,7,"#FF0000"), (8,8,"#FF0000"), (8,9,"#FF0000"), (8,10,"#FF0000"), (8,11,"#FF0000"), (8,12,"#FF0000"), (8,13,"#FF0000"), (8,14,"#8B4513"), (8,15,"#8B4513"), (9,1,"#C19153"), (9,3,"#C19153"), (9,4,"#C19153"), (9,6,"#C19153"), (9,7,"#FF0000"), (9,8,"#FF0000"), (9,9,"#FF0000"), (9,10,"#8B4513"), (9,11,"#8B4513"), (10,2,"#C19153"), (10,6,"#C19153"), (10,7,"#8B4513"), (11,4,"#C19153"), (11,5,"#C19153")]
charIceCream = [(0,1,"#8B4513"), (0,2,"#8B4513"), (0,3,"#00FFFF"), (0,6,"#BE1CBE"), (0,7,"#BE1CBE"), (0,9,"#C19153"), (1,0,"#8B4513"), (1,1,"#8B4513"), (1,2,"#279627"), (1,3,"#00FFFF"), (1,4,"#00FFFF"), (1,5,"#BE1CBE"), (1,6,"#BE1CBE"), (1,7,"#BE1CBE"), (1,8,"#BE1CBE"), (1,9,"#FF5900"), (1,10,"#C19153"), (1,11,"#C19153"), (2,0,"#8B4513"), (2,1,"#FFFFFF"), (2,2,"#8B4513"), (2,3,"#8B4513"), (2,4,"#00FFFF"), (2,5,"#BE1CBE"), (2,6,"#FFFFFF"), (2,7,"#BE1CBE"), (2,8,"#BE1CBE"), (2,9,"#BE1CBE"), (2,10,"#C19153"), (2,11,"#C19153"), (2,12,"#C19153"), (2,13,"#C19153"), (3,0,"#279627"), (3,1,"#8B4513"), (3,2,"#8B4513"), (3,3,"#00FFFF"), (3,4,"#00FFFF"), (3,5,"#BE1CBE"), (3,6,"#BE1CBE"), (3,7,"#BE1CBE"), (3,8,"#BE1CBE"), (3,9,"#C19153"), (3,10,"#FF5900"), (3,11,"#C19153"), (3,12,"#FF5900"), (3,13,"#C19153"), (3,14,"#C19153"), (3,15,"#C19153"), (4,0,"#8B4513"), (4,1,"#8B4513"), (4,2,"#8B4513"), (4,3,"#00FFFF"), (4,4,"#00FFFF"), (4,5,"#BE1CBE"), (4,6,"#BE1CBE"), (4,7,"#BE1CBE"), (4,8,"#BE1CBE"), (4,9,"#C19153"), (4,10,"#C19153"), (4,11,"#FF5900"), (4,12,"#FF5900"), (4,13,"#C19153"), (4,14,"#C19153"), (4,15,"#C19153"), (5,0,"#8B4513"), (5,1,"#FFFF00"), (5,2,"#8B4513"), (5,3,"#00FFFF"), (5,4,"#00FFFF"), (5,5,"#BE1CBE"), (5,6,"#BE1CBE"), (5,7,"#BE1CBE"), (5,8,"#BE1CBE"), (5,9,"#C19153"), (5,10,"#C19153"), (5,11,"#C19153"), (5,12,"#C19153"), (5,13,"#FF5900"), (5,14,"#C19153"), (5,15,"#C19153"), (6,0,"#8B4513"), (6,1,"#8B4513"), (6,2,"#8B4513"), (6,3,"#8B4513"), (6,4,"#00FFFF"), (6,5,"#BE1CBE"), (6,6,"#BE1CBE"), (6,7,"#BE1CBE"), (6,8,"#BE1CBE"), (6,9,"#BE1CBE"), (6,10,"#C19153"), (6,11,"#FF5900"), (6,12,"#FF5900"), (6,13,"#C19153"), (7,1,"#8B4513"), (7,2,"#FFFF00"), (7,3,"#00FFFF"), (7,4,"#00FFFF"), (7,5,"#BE1CBE"), (7,6,"#BE1CBE"), (7,7,"#BE1CBE"), (7,8,"#BE1CBE"), (7,9,"#C19153"), (7,10,"#FF5900"), (7,11,"#C19153"), (8,6,"#BE1CBE"), (8,7,"#BE1CBE"), (8,9,"#C19153")]
charPacmanCherry = [(0,7,"#FF0000"), (0,8,"#FF0000"), (0,9,"#FF0000"), (0,10,"#FF0000"), (1,6,"#FF0000"), (1,7,"#FF0000"), (1,8,"#FF0000"), (1,9,"#FFFFFF"), (1,10,"#FF0000"), (1,11,"#FF0000"), (2,6,"#FF0000"), (2,7,"#FF0000"), (2,8,"#FF0000"), (2,9,"#FF0000"), (2,10,"#FFFFFF"), (2,11,"#FF0000"), (3,6,"#FF0000"), (3,7,"#8B4513"), (3,8,"#FF0000"), (3,9,"#FF0000"), (3,10,"#FF0000"), (3,11,"#FF0000"), (4,6,"#8B4513"), (4,7,"#FF0000"), (4,8,"#FF0000"), (5,5,"#8B4513"), (5,7,"#FF0000"), (5,9,"#FF0000"), (5,10,"#FF0000"), (5,11,"#FF0000"), (5,12,"#FF0000"), (6,4,"#8B4513"), (6,8,"#FF0000"), (6,9,"#FF0000"), (6,10,"#FF0000"), (6,11,"#FFFFFF"), (6,12,"#FF0000"), (6,13,"#FF0000"), (7,4,"#8B4513"), (7,7,"#8B4513"), (7,8,"#8B4513"), (7,9,"#8B4513"), (7,10,"#FF0000"), (7,11,"#FF0000"), (7,12,"#FFFFFF"), (7,13,"#FF0000"), (8,3,"#8B4513"), (8,6,"#8B4513"), (8,8,"#FF0000"), (8,9,"#FF0000"), (8,10,"#FF0000"), (8,11,"#FF0000"), (8,12,"#FF0000"), (8,13,"#FF0000"), (9,3,"#8B4513"), (9,4,"#8B4513"), (9,5,"#8B4513"), (9,8,"#FF0000"), (9,9,"#FF0000"), (9,10,"#FF0000"), (9,11,"#FF0000"), (9,12,"#FF0000"), (9,13,"#FF0000"), (10,2,"#8B4513"), (10,3,"#8B4513"), (10,9,"#FF0000"), (10,10,"#FF0000"), (10,11,"#FF0000"), (10,12,"#FF0000"), (11,2,"#8B4513"), (11,3,"#8B4513")]
charOrange = [(1,6,"#FFA07A"), (1,7,"#FFA07A"), (1,8,"#FFA07A"), (1,9,"#FFA07A"), (1,10,"#FFA07A"), (1,11,"#FFA07A"), (2,4,"#FFA07A"), (2,5,"#FFA07A"), (2,6,"#FFA07A"), (2,7,"#FFA07A"), (2,8,"#FF5900"), (2,9,"#FF5900"), (2,10,"#FF5900"), (2,11,"#FF5900"), (2,12,"#FF5900"), (2,13,"#FF5900"), (3,3,"#FFA07A"), (3,4,"#FFA07A"), (3,5,"#FFA07A"), (3,6,"#FFFFFF"), (3,7,"#FFFFFF"), (3,8,"#FFA07A"), (3,9,"#FF5900"), (3,10,"#FF5900"), (3,11,"#FF5900"), (3,12,"#FF5900"), (3,13,"#FF5900"), (3,14,"#FF5900"), (4,3,"#FFA07A"), (4,4,"#FFA07A"), (4,5,"#FFA07A"), (4,6,"#FFFFFF"), (4,7,"#FFFFFF"), (4,8,"#FFA07A"), (4,9,"#FF5900"), (4,10,"#FF5900"), (4,11,"#FF5900"), (4,12,"#FF5900"), (4,13,"#FF5900"), (4,14,"#FF5900"), (5,2,"#FF5900"), (5,3,"#FFA07A"), (5,4,"#FF5900"), (5,5,"#FF5900"), (5,6,"#FFA07A"), (5,7,"#FFA07A"), (5,8,"#FFA07A"), (5,9,"#FF5900"), (5,10,"#FF5900"), (5,11,"#FF5900"), (5,12,"#FF5900"), (5,13,"#FF5900"), (5,14,"#FF5900"), (5,15,"#FF5900"), (6,2,"#FF5900"), (6,3,"#FF5900"), (6,4,"#279627"), (6,5,"#FF5900"), (6,6,"#FFA07A"), (6,7,"#FFA07A"), (6,8,"#FF5900"), (6,9,"#FF5900"), (6,10,"#FF5900"), (6,11,"#FF5900"), (6,12,"#FF5900"), (6,13,"#FF5900"), (6,14,"#FF5900"), (6,15,"#FF5900"), (7,3,"#279627"), (7,4,"#90EE90"), (7,5,"#FF5900"), (7,6,"#FFA07A"), (7,7,"#FFA07A"), (7,8,"#FF5900"), (7,9,"#FF5900"), (7,10,"#FF5900"), (7,11,"#FF5900"), (7,12,"#FF5900"), (7,13,"#FF5900"), (7,14,"#FF5900"), (7,15,"#FF5900"), (8,1,"#90EE90"), (8,2,"#90EE90"), (8,3,"#FF5900"), (8,4,"#279627"), (8,5,"#FF5900"), (8,6,"#FFA07A"), (8,7,"#FFA07A"), (8,8,"#FFA07A"), (8,9,"#FF5900"), (8,10,"#FF5900"), (8,11,"#FF5900"), (8,12,"#FF5900"), (8,13,"#FF5900"), (8,14,"#FF5900"), (8,15,"#FF5900"), (9,0,"#90EE90"), (9,1,"#90EE90"), (9,2,"#FF5900"), (9,3,"#FF5900"), (9,4,"#FF5900"), (9,5,"#FF5900"), (9,6,"#FFA07A"), (9,7,"#FFA07A"), (9,8,"#FFA07A"), (9,9,"#FF5900"), (9,10,"#FF5900"), (9,11,"#FF5900"), (9,12,"#FF5900"), (9,13,"#FF5900"), (9,14,"#FF5900"), (9,15,"#FF5900"), (10,0,"#90EE90"), (10,1,"#90EE90"), (10,3,"#FF5900"), (10,4,"#FF5900"), (10,5,"#FFA07A"), (10,6,"#FFA07A"), (10,7,"#FFA07A"), (10,8,"#FF5900"), (10,9,"#FF5900"), (10,10,"#FF5900"), (10,11,"#FF5900"), (10,12,"#FF5900"), (10,13,"#FF5900"), (10,14,"#FF5900"), (10,15,"#FF5900"), (11,0,"#90EE90"), (11,1,"#279627"), (11,3,"#FF5900"), (11,4,"#FF5900"), (11,5,"#FFA07A"), (11,6,"#FFA07A"), (11,7,"#FFA07A"), (11,8,"#FF5900"), (11,9,"#FF5900"), (11,10,"#FF5900"), (11,11,"#FF5900"), (11,12,"#FF5900"), (11,13,"#FF5900"), (11,14,"#FF5900"), (12,0,"#90EE90"), (12,4,"#FF5900"), (12,5,"#FF5900"), (12,6,"#FF5900"), (12,7,"#FF5900"), (12,8,"#FF5900"), (12,9,"#FF5900"), (12,10,"#FF5900"), (12,11,"#FF5900"), (12,12,"#FF5900"), (12,13,"#FF5900"), (12,14,"#FF5900"), (13,5,"#FF5900"), (13,6,"#FF5900"), (13,7,"#FF5900"), (13,8,"#FF5900"), (13,9,"#FF5900"), (13,10,"#FF5900"), (13,11,"#FF5900"), (13,12,"#FF5900"), (13,13,"#FF5900"), (14,7,"#FF5900"), (14,8,"#FF5900"), (14,9,"#FF5900"), (14,10,"#FF5900"), (14,11,"#FF5900")]


charRobotron = [(1,4,"#FF0000"), (1,5,"#FFFF00"), (1,6,"#FFFF00"), (1,7,"#FFFF00"), (2,4,"#FF0000"), (2,5,"#FF0000"), (2,11,"#FFFF00"), (3,1,"#90EE90"), (3,2,"#00FFFF"), (3,4,"#FFFFFF"), (3,5,"#FF0000"), (3,6,"#FF0000"), (3,9,"#FF0000"), (3,10,"#FF0000"), (3,11,"#FFFF00"), (4,0,"#FF0000"), (4,1,"#90EE90"), (4,2,"#00FFFF"), (4,3,"#FF0000"), (4,4,"#FF0000"), (4,5,"#FFFFFF"), (4,6,"#FF0000"), (4,7,"#FF0000"), (4,8,"#FF0000"), (4,9,"#FF0000"), (4,10,"#FF0000"), (4,11,"#FFFF00"), (5,0,"#FF0000"), (5,1,"#90EE90"), (5,2,"#00FFFF"), (5,3,"#FF0000"), (5,4,"#FF0000"), (5,5,"#FFFFFF"), (5,6,"#FFFFFF"), (5,7,"#FF0000"), (5,8,"#FF0000"), (6,0,"#FF0000"), (6,1,"#90EE90"), (6,2,"#00FFFF"), (6,3,"#FF0000"), (6,4,"#FF0000"), (6,5,"#FFFFFF"), (6,6,"#FF0000"), (6,7,"#FF0000"), (6,8,"#FF0000"), (6,9,"#FF0000"), (6,10,"#FF0000"), (6,11,"#FFFF00"), (7,1,"#90EE90"), (7,2,"#00FFFF"), (7,4,"#FFFFFF"), (7,5,"#FF0000"), (7,6,"#FF0000"), (7,9,"#FF0000"), (7,10,"#FF0000"), (7,11,"#FFFF00"), (8,4,"#FF0000"), (8,5,"#FF0000"), (8,11,"#FFFF00"), (9,4,"#FF0000"), (9,5,"#FFFF00"), (9,6,"#FFFF00"), (9,7,"#FFFF00")]
charWall = [(0,2,"#FFFFFF"), (0,3,"#FFFFFF"), (0,4,"#FFFFFF"), (0,5,"#FFFFFF"), (0,6,"#FFFFFF"), (0,7,"#FFFFFF"), (0,8,"#FFFFFF"), (0,9,"#FFFFFF"), (0,10,"#FFFFFF"), (0,11,"#FFFFFF"), (0,12,"#FFFFFF"), (0,13,"#FFFFFF"), (0,14,"#FFFFFF"), (0,15,"#FFFFFF"), (0,16,"#FFFFFF"), (0,17,"#FFFFFF"), (0,18,"#FFFFFF"), (0,19,"#FFFFFF"), (0,20,"#FFFFFF"), (0,21,"#FFFFFF"), (1,1,"#FFFFFF"), (1,2,"#B5B3F5"), (1,3,"#B5B3F5"), (1,4,"#B5B3F5"), (1,5,"#B5B3F5"), (1,6,"#B5B3F5"), (1,7,"#B5B3F5"), (1,8,"#B5B3F5"), (1,9,"#B5B3F5"), (1,10,"#B5B3F5"), (1,11,"#B5B3F5"), (1,12,"#B5B3F5"), (1,13,"#B5B3F5"), (1,14,"#B5B3F5"), (1,15,"#B5B3F5"), (1,16,"#B5B3F5"), (1,17,"#B5B3F5"), (1,18,"#B5B3F5"), (1,19,"#B5B3F5"), (1,20,"#B5B3F5"), (1,21,"#B5B3F5"), (1,22,"#FFFFFF"), (2,0,"#FFFFFF"), (2,1,"#B5B3F5"), (2,2,"#B5B3F5"), (2,3,"#B5B3F5"), (2,4,"#B5B3F5"), (2,5,"#B5B3F5"), (2,6,"#B5B3F5"), (2,7,"#B5B3F5"), (2,8,"#B5B3F5"), (2,9,"#B5B3F5"), (2,10,"#B5B3F5"), (2,11,"#B5B3F5"), (2,12,"#B5B3F5"), (2,13,"#B5B3F5"), (2,14,"#B5B3F5"), (2,15,"#B5B3F5"), (2,16,"#B5B3F5"), (2,17,"#B5B3F5"), (2,18,"#B5B3F5"), (2,19,"#B5B3F5"), (2,20,"#B5B3F5"), (2,21,"#B5B3F5"), (2,22,"#B5B3F5"), (2,23,"#FFFFFF"), (3,0,"#FFFFFF"), (3,1,"#B5B3F5"), (3,2,"#B5B3F5"), (3,3,"#B5B3F5"), (3,4,"#B5B3F5"), (3,5,"#B5B3F5"), (3,6,"#B5B3F5"), (3,7,"#B5B3F5"), (3,8,"#B5B3F5"), (3,9,"#B5B3F5"), (3,10,"#B5B3F5"), (3,11,"#B5B3F5"), (3,12,"#B5B3F5"), (3,13,"#B5B3F5"), (3,14,"#B5B3F5"), (3,15,"#B5B3F5"), (3,16,"#B5B3F5"), (3,17,"#B5B3F5"), (3,18,"#B5B3F5"), (3,19,"#B5B3F5"), (3,20,"#B5B3F5"), (3,21,"#B5B3F5"), (3,22,"#B5B3F5"), (3,23,"#FFFFFF"), (4,0,"#FFFFFF"), (4,1,"#B5B3F5"), (4,2,"#B5B3F5"), (4,3,"#B5B3F5"), (4,4,"#B5B3F5"), (4,5,"#B5B3F5"), (4,6,"#B5B3F5"), (4,7,"#B5B3F5"), (4,8,"#B5B3F5"), (4,9,"#B5B3F5"), (4,10,"#B5B3F5"), (4,11,"#B5B3F5"), (4,12,"#B5B3F5"), (4,13,"#B5B3F5"), (4,14,"#B5B3F5"), (4,15,"#B5B3F5"), (4,16,"#B5B3F5"), (4,17,"#B5B3F5"), (4,18,"#B5B3F5"), (4,19,"#B5B3F5"), (4,20,"#B5B3F5"), (4,21,"#B5B3F5"), (4,22,"#B5B3F5"), (4,23,"#FFFFFF"), (5,0,"#FFFFFF"), (5,1,"#B5B3F5"), (5,2,"#B5B3F5"), (5,3,"#B5B3F5"), (5,4,"#B5B3F5"), (5,5,"#B5B3F5"), (5,6,"#B5B3F5"), (5,7,"#B5B3F5"), (5,8,"#B5B3F5"), (5,9,"#B5B3F5"), (5,10,"#B5B3F5"), (5,11,"#B5B3F5"), (5,12,"#B5B3F5"), (5,13,"#B5B3F5"), (5,14,"#B5B3F5"), (5,15,"#B5B3F5"), (5,16,"#B5B3F5"), (5,17,"#B5B3F5"), (5,18,"#B5B3F5"), (5,19,"#B5B3F5"), (5,20,"#B5B3F5"), (5,21,"#B5B3F5"), (5,22,"#B5B3F5"), (5,23,"#FFFFFF"), (6,0,"#FFFFFF"), (6,1,"#B5B3F5"), (6,2,"#B5B3F5"), (6,3,"#B5B3F5"), (6,4,"#B5B3F5"), (6,5,"#B5B3F5"), (6,6,"#B5B3F5"), (6,7,"#B5B3F5"), (6,8,"#B5B3F5"), (6,9,"#B5B3F5"), (6,10,"#B5B3F5"), (6,11,"#B5B3F5"), (6,12,"#B5B3F5"), (6,13,"#B5B3F5"), (6,14,"#B5B3F5"), (6,15,"#B5B3F5"), (6,16,"#B5B3F5"), (6,17,"#B5B3F5"), (6,18,"#B5B3F5"), (6,19,"#B5B3F5"), (6,20,"#B5B3F5"), (6,21,"#B5B3F5"), (6,22,"#B5B3F5"), (6,23,"#FFFFFF"), (7,0,"#FFFFFF"), (7,1,"#B5B3F5"), (7,2,"#B5B3F5"), (7,3,"#B5B3F5"), (7,4,"#B5B3F5"), (7,5,"#B5B3F5"), (7,6,"#B5B3F5"), (7,7,"#B5B3F5"), (7,8,"#B5B3F5"), (7,9,"#B5B3F5"), (7,10,"#B5B3F5"), (7,11,"#B5B3F5"), (7,12,"#B5B3F5"), (7,13,"#B5B3F5"), (7,14,"#B5B3F5"), (7,15,"#B5B3F5"), (7,16,"#B5B3F5"), (7,17,"#B5B3F5"), (7,18,"#B5B3F5"), (7,19,"#B5B3F5"), (7,20,"#B5B3F5"), (7,21,"#B5B3F5"), (7,22,"#B5B3F5"), (7,23,"#FFFFFF"), (8,0,"#FFFFFF"), (8,1,"#B5B3F5"), (8,2,"#B5B3F5"), (8,3,"#B5B3F5"), (8,4,"#B5B3F5"), (8,5,"#B5B3F5"), (8,6,"#B5B3F5"), (8,7,"#B5B3F5"), (8,8,"#B5B3F5"), (8,9,"#B5B3F5"), (8,10,"#B5B3F5"), (8,11,"#B5B3F5"), (8,12,"#B5B3F5"), (8,13,"#B5B3F5"), (8,14,"#B5B3F5"), (8,15,"#B5B3F5"), (8,16,"#B5B3F5"), (8,17,"#B5B3F5"), (8,18,"#B5B3F5"), (8,19,"#B5B3F5"), (8,20,"#B5B3F5"), (8,21,"#B5B3F5"), (8,22,"#B5B3F5"), (8,23,"#FFFFFF"), (9,0,"#FFFFFF"), (9,1,"#B5B3F5"), (9,2,"#B5B3F5"), (9,3,"#B5B3F5"), (9,4,"#B5B3F5"), (9,5,"#B5B3F5"), (9,6,"#B5B3F5"), (9,7,"#B5B3F5"), (9,8,"#B5B3F5"), (9,9,"#B5B3F5"), (9,10,"#B5B3F5"), (9,11,"#B5B3F5"), (9,12,"#B5B3F5"), (9,13,"#B5B3F5"), (9,14,"#B5B3F5"), (9,15,"#B5B3F5"), (9,16,"#B5B3F5"), (9,17,"#B5B3F5"), (9,18,"#B5B3F5"), (9,19,"#B5B3F5"), (9,20,"#B5B3F5"), (9,21,"#B5B3F5"), (9,22,"#B5B3F5"), (9,23,"#FFFFFF"), (10,0,"#FFFFFF"), (10,1,"#B5B3F5"), (10,2,"#B5B3F5"), (10,3,"#B5B3F5"), (10,4,"#B5B3F5"), (10,5,"#B5B3F5"), (10,6,"#B5B3F5"), (10,7,"#B5B3F5"), (10,8,"#B5B3F5"), (10,9,"#B5B3F5"), (10,10,"#B5B3F5"), (10,11,"#B5B3F5"), (10,12,"#B5B3F5"), (10,13,"#B5B3F5"), (10,14,"#B5B3F5"), (10,15,"#B5B3F5"), (10,16,"#B5B3F5"), (10,17,"#B5B3F5"), (10,18,"#B5B3F5"), (10,19,"#B5B3F5"), (10,20,"#B5B3F5"), (10,21,"#B5B3F5"), (10,22,"#B5B3F5"), (10,23,"#FFFFFF"), (11,0,"#FFFFFF"), (11,1,"#B5B3F5"), (11,2,"#B5B3F5"), (11,3,"#B5B3F5"), (11,4,"#B5B3F5"), (11,5,"#B5B3F5"), (11,6,"#B5B3F5"), (11,7,"#B5B3F5"), (11,8,"#B5B3F5"), (11,9,"#B5B3F5"), (11,10,"#B5B3F5"), (11,11,"#B5B3F5"), (11,12,"#B5B3F5"), (11,13,"#B5B3F5"), (11,14,"#B5B3F5"), (11,15,"#B5B3F5"), (11,16,"#B5B3F5"), (11,17,"#B5B3F5"), (11,18,"#B5B3F5"), (11,19,"#B5B3F5"), (11,20,"#B5B3F5"), (11,21,"#B5B3F5"), (11,22,"#B5B3F5"), (11,23,"#FFFFFF"), (12,0,"#FFFFFF"), (12,1,"#B5B3F5"), (12,2,"#B5B3F5"), (12,3,"#B5B3F5"), (12,4,"#B5B3F5"), (12,5,"#B5B3F5"), (12,6,"#B5B3F5"), (12,7,"#B5B3F5"), (12,8,"#B5B3F5"), (12,9,"#B5B3F5"), (12,10,"#B5B3F5"), (12,11,"#B5B3F5"), (12,12,"#B5B3F5"), (12,13,"#B5B3F5"), (12,14,"#B5B3F5"), (12,15,"#B5B3F5"), (12,16,"#B5B3F5"), (12,17,"#B5B3F5"), (12,18,"#B5B3F5"), (12,19,"#B5B3F5"), (12,20,"#B5B3F5"), (12,21,"#B5B3F5"), (12,22,"#B5B3F5"), (12,23,"#FFFFFF"), (13,0,"#FFFFFF"), (13,1,"#B5B3F5"), (13,2,"#B5B3F5"), (13,3,"#B5B3F5"), (13,4,"#B5B3F5"), (13,5,"#B5B3F5"), (13,6,"#B5B3F5"), (13,7,"#B5B3F5"), (13,8,"#B5B3F5"), (13,9,"#B5B3F5"), (13,10,"#B5B3F5"), (13,11,"#B5B3F5"), (13,12,"#B5B3F5"), (13,13,"#B5B3F5"), (13,14,"#B5B3F5"), (13,15,"#B5B3F5"), (13,16,"#B5B3F5"), (13,17,"#B5B3F5"), (13,18,"#B5B3F5"), (13,19,"#B5B3F5"), (13,20,"#B5B3F5"), (13,21,"#B5B3F5"), (13,22,"#B5B3F5"), (13,23,"#FFFFFF"), (14,0,"#FFFFFF"), (14,1,"#B5B3F5"), (14,2,"#B5B3F5"), (14,3,"#B5B3F5"), (14,4,"#B5B3F5"), (14,5,"#B5B3F5"), (14,6,"#B5B3F5"), (14,7,"#B5B3F5"), (14,8,"#B5B3F5"), (14,9,"#B5B3F5"), (14,10,"#B5B3F5"), (14,11,"#B5B3F5"), (14,12,"#B5B3F5"), (14,13,"#B5B3F5"), (14,14,"#B5B3F5"), (14,15,"#B5B3F5"), (14,16,"#B5B3F5"), (14,17,"#B5B3F5"), (14,18,"#B5B3F5"), (14,19,"#B5B3F5"), (14,20,"#B5B3F5"), (14,21,"#B5B3F5"), (14,22,"#B5B3F5"), (14,23,"#FFFFFF"), (15,0,"#FFFFFF"), (15,1,"#B5B3F5"), (15,2,"#B5B3F5"), (15,3,"#B5B3F5"), (15,4,"#B5B3F5"), (15,5,"#B5B3F5"), (15,6,"#B5B3F5"), (15,7,"#B5B3F5"), (15,8,"#B5B3F5"), (15,9,"#B5B3F5"), (15,10,"#B5B3F5"), (15,11,"#B5B3F5"), (15,12,"#B5B3F5"), (15,13,"#B5B3F5"), (15,14,"#B5B3F5"), (15,15,"#B5B3F5"), (15,16,"#B5B3F5"), (15,17,"#B5B3F5"), (15,18,"#B5B3F5"), (15,19,"#B5B3F5"), (15,20,"#B5B3F5"), (15,21,"#B5B3F5"), (15,22,"#B5B3F5"), (15,23,"#FFFFFF"), (16,0,"#FFFFFF"), (16,1,"#B5B3F5"), (16,2,"#B5B3F5"), (16,3,"#B5B3F5"), (16,4,"#B5B3F5"), (16,5,"#B5B3F5"), (16,6,"#B5B3F5"), (16,7,"#B5B3F5"), (16,8,"#B5B3F5"), (16,9,"#B5B3F5"), (16,10,"#B5B3F5"), (16,11,"#B5B3F5"), (16,12,"#B5B3F5"), (16,13,"#B5B3F5"), (16,14,"#B5B3F5"), (16,15,"#B5B3F5"), (16,16,"#B5B3F5"), (16,17,"#B5B3F5"), (16,18,"#B5B3F5"), (16,19,"#B5B3F5"), (16,20,"#B5B3F5"), (16,21,"#B5B3F5"), (16,22,"#B5B3F5"), (16,23,"#FFFFFF"), (17,0,"#FFFFFF"), (17,1,"#B5B3F5"), (17,2,"#B5B3F5"), (17,3,"#B5B3F5"), (17,4,"#B5B3F5"), (17,5,"#B5B3F5"), (17,6,"#B5B3F5"), (17,7,"#B5B3F5"), (17,8,"#B5B3F5"), (17,9,"#B5B3F5"), (17,10,"#B5B3F5"), (17,11,"#B5B3F5"), (17,12,"#B5B3F5"), (17,13,"#B5B3F5"), (17,14,"#B5B3F5"), (17,15,"#B5B3F5"), (17,16,"#B5B3F5"), (17,17,"#B5B3F5"), (17,18,"#B5B3F5"), (17,19,"#B5B3F5"), (17,20,"#B5B3F5"), (17,21,"#B5B3F5"), (17,22,"#B5B3F5"), (17,23,"#FFFFFF"), (18,0,"#FFFFFF"), (18,1,"#B5B3F5"), (18,2,"#B5B3F5"), (18,3,"#B5B3F5"), (18,4,"#B5B3F5"), (18,5,"#B5B3F5"), (18,6,"#B5B3F5"), (18,7,"#B5B3F5"), (18,8,"#B5B3F5"), (18,9,"#B5B3F5"), (18,10,"#B5B3F5"), (18,11,"#B5B3F5"), (18,12,"#B5B3F5"), (18,13,"#B5B3F5"), (18,14,"#B5B3F5"), (18,15,"#B5B3F5"), (18,16,"#B5B3F5"), (18,17,"#B5B3F5"), (18,18,"#B5B3F5"), (18,19,"#B5B3F5"), (18,20,"#B5B3F5"), (18,21,"#B5B3F5"), (18,22,"#B5B3F5"), (18,23,"#FFFFFF"), (19,0,"#FFFFFF"), (19,1,"#B5B3F5"), (19,2,"#B5B3F5"), (19,3,"#B5B3F5"), (19,4,"#B5B3F5"), (19,5,"#B5B3F5"), (19,6,"#B5B3F5"), (19,7,"#B5B3F5"), (19,8,"#B5B3F5"), (19,9,"#B5B3F5"), (19,10,"#B5B3F5"), (19,11,"#B5B3F5"), (19,12,"#B5B3F5"), (19,13,"#B5B3F5"), (19,14,"#B5B3F5"), (19,15,"#B5B3F5"), (19,16,"#B5B3F5"), (19,17,"#B5B3F5"), (19,18,"#B5B3F5"), (19,19,"#B5B3F5"), (19,20,"#B5B3F5"), (19,21,"#B5B3F5"), (19,22,"#B5B3F5"), (19,23,"#FFFFFF"), (20,0,"#FFFFFF"), (20,1,"#B5B3F5"), (20,2,"#B5B3F5"), (20,3,"#B5B3F5"), (20,4,"#B5B3F5"), (20,5,"#B5B3F5"), (20,6,"#B5B3F5"), (20,7,"#B5B3F5"), (20,8,"#B5B3F5"), (20,9,"#B5B3F5"), (20,10,"#B5B3F5"), (20,11,"#B5B3F5"), (20,12,"#B5B3F5"), (20,13,"#B5B3F5"), (20,14,"#B5B3F5"), (20,15,"#B5B3F5"), (20,16,"#B5B3F5"), (20,17,"#B5B3F5"), (20,18,"#B5B3F5"), (20,19,"#B5B3F5"), (20,20,"#B5B3F5"), (20,21,"#B5B3F5"), (20,22,"#B5B3F5"), (20,23,"#FFFFFF"), (21,0,"#FFFFFF"), (21,1,"#B5B3F5"), (21,2,"#B5B3F5"), (21,3,"#B5B3F5"), (21,4,"#B5B3F5"), (21,5,"#B5B3F5"), (21,6,"#B5B3F5"), (21,7,"#B5B3F5"), (21,8,"#B5B3F5"), (21,9,"#B5B3F5"), (21,10,"#B5B3F5"), (21,11,"#B5B3F5"), (21,12,"#B5B3F5"), (21,13,"#B5B3F5"), (21,14,"#B5B3F5"), (21,15,"#B5B3F5"), (21,16,"#B5B3F5"), (21,17,"#B5B3F5"), (21,18,"#B5B3F5"), (21,19,"#B5B3F5"), (21,20,"#B5B3F5"), (21,21,"#B5B3F5"), (21,22,"#B5B3F5"), (21,23,"#FFFFFF"), (22,1,"#FFFFFF"), (22,2,"#B5B3F5"), (22,3,"#B5B3F5"), (22,4,"#B5B3F5"), (22,5,"#B5B3F5"), (22,6,"#B5B3F5"), (22,7,"#B5B3F5"), (22,8,"#B5B3F5"), (22,9,"#B5B3F5"), (22,10,"#B5B3F5"), (22,11,"#B5B3F5"), (22,12,"#B5B3F5"), (22,13,"#B5B3F5"), (22,14,"#B5B3F5"), (22,15,"#B5B3F5"), (22,16,"#B5B3F5"), (22,17,"#B5B3F5"), (22,18,"#B5B3F5"), (22,19,"#B5B3F5"), (22,20,"#B5B3F5"), (22,21,"#B5B3F5"), (22,22,"#FFFFFF"), (23,2,"#FFFFFF"), (23,3,"#FFFFFF"), (23,4,"#FFFFFF"), (23,5,"#FFFFFF"), (23,6,"#FFFFFF"), (23,7,"#FFFFFF"), (23,8,"#FFFFFF"), (23,9,"#FFFFFF"), (23,10,"#FFFFFF"), (23,11,"#FFFFFF"), (23,12,"#FFFFFF"), (23,13,"#FFFFFF"), (23,14,"#FFFFFF"), (23,15,"#FFFFFF"), (23,16,"#FFFFFF"), (23,17,"#FFFFFF"), (23,18,"#FFFFFF"), (23,19,"#FFFFFF"), (23,20,"#FFFFFF"), (23,21,"#FFFFFF")]
charWall2 = [(4,6,"#FFFFFF"), (4,7,"#FFFFFF"), (4,8,"#FFFFFF"), (4,9,"#FFFFFF"), (4,10,"#FFFFFF"), (4,11,"#FFFFFF"), (4,12,"#FFFFFF"), (4,13,"#FFFFFF"), (4,14,"#FFFFFF"), (4,15,"#FFFFFF"), (4,16,"#FFFFFF"), (4,17,"#FFFFFF"), (5,5,"#FFFFFF"), (5,6,"#B5B3F5"), (5,7,"#B5B3F5"), (5,8,"#B5B3F5"), (5,9,"#B5B3F5"), (5,10,"#B5B3F5"), (5,11,"#B5B3F5"), (5,12,"#B5B3F5"), (5,13,"#B5B3F5"), (5,14,"#B5B3F5"), (5,15,"#B5B3F5"), (5,16,"#B5B3F5"), (5,17,"#B5B3F5"), (5,18,"#FFFFFF"), (6,4,"#FFFFFF"), (6,5,"#B5B3F5"), (6,6,"#B5B3F5"), (6,7,"#B5B3F5"), (6,8,"#B5B3F5"), (6,9,"#B5B3F5"), (6,10,"#B5B3F5"), (6,11,"#B5B3F5"), (6,12,"#B5B3F5"), (6,13,"#B5B3F5"), (6,14,"#B5B3F5"), (6,15,"#B5B3F5"), (6,16,"#B5B3F5"), (6,17,"#B5B3F5"), (6,18,"#B5B3F5"), (6,19,"#FFFFFF"), (7,4,"#FFFFFF"), (7,5,"#B5B3F5"), (7,6,"#B5B3F5"), (7,7,"#B5B3F5"), (7,8,"#B5B3F5"), (7,9,"#B5B3F5"), (7,10,"#B5B3F5"), (7,11,"#B5B3F5"), (7,12,"#B5B3F5"), (7,13,"#B5B3F5"), (7,14,"#B5B3F5"), (7,15,"#B5B3F5"), (7,16,"#B5B3F5"), (7,17,"#B5B3F5"), (7,18,"#B5B3F5"), (7,19,"#FFFFFF"), (8,4,"#FFFFFF"), (8,5,"#B5B3F5"), (8,6,"#B5B3F5"), (8,7,"#B5B3F5"), (8,8,"#B5B3F5"), (8,9,"#B5B3F5"), (8,10,"#B5B3F5"), (8,11,"#B5B3F5"), (8,12,"#B5B3F5"), (8,13,"#B5B3F5"), (8,14,"#B5B3F5"), (8,15,"#B5B3F5"), (8,16,"#B5B3F5"), (8,17,"#B5B3F5"), (8,18,"#B5B3F5"), (8,19,"#FFFFFF"), (9,4,"#FFFFFF"), (9,5,"#B5B3F5"), (9,6,"#B5B3F5"), (9,7,"#B5B3F5"), (9,8,"#B5B3F5"), (9,9,"#B5B3F5"), (9,10,"#B5B3F5"), (9,11,"#B5B3F5"), (9,12,"#B5B3F5"), (9,13,"#B5B3F5"), (9,14,"#B5B3F5"), (9,15,"#B5B3F5"), (9,16,"#B5B3F5"), (9,17,"#B5B3F5"), (9,18,"#B5B3F5"), (9,19,"#FFFFFF"), (10,4,"#FFFFFF"), (10,5,"#B5B3F5"), (10,6,"#B5B3F5"), (10,7,"#B5B3F5"), (10,8,"#B5B3F5"), (10,9,"#B5B3F5"), (10,10,"#B5B3F5"), (10,11,"#B5B3F5"), (10,12,"#B5B3F5"), (10,13,"#B5B3F5"), (10,14,"#B5B3F5"), (10,15,"#B5B3F5"), (10,16,"#B5B3F5"), (10,17,"#B5B3F5"), (10,18,"#B5B3F5"), (10,19,"#FFFFFF"), (11,4,"#FFFFFF"), (11,5,"#B5B3F5"), (11,6,"#B5B3F5"), (11,7,"#B5B3F5"), (11,8,"#B5B3F5"), (11,9,"#B5B3F5"), (11,10,"#B5B3F5"), (11,11,"#B5B3F5"), (11,12,"#B5B3F5"), (11,13,"#B5B3F5"), (11,14,"#B5B3F5"), (11,15,"#B5B3F5"), (11,16,"#B5B3F5"), (11,17,"#B5B3F5"), (11,18,"#B5B3F5"), (11,19,"#FFFFFF"), (12,4,"#FFFFFF"), (12,5,"#B5B3F5"), (12,6,"#B5B3F5"), (12,7,"#B5B3F5"), (12,8,"#B5B3F5"), (12,9,"#B5B3F5"), (12,10,"#B5B3F5"), (12,11,"#B5B3F5"), (12,12,"#B5B3F5"), (12,13,"#B5B3F5"), (12,14,"#B5B3F5"), (12,15,"#B5B3F5"), (12,16,"#B5B3F5"), (12,17,"#B5B3F5"), (12,18,"#B5B3F5"), (12,19,"#FFFFFF"), (13,4,"#FFFFFF"), (13,5,"#B5B3F5"), (13,6,"#B5B3F5"), (13,7,"#B5B3F5"), (13,8,"#B5B3F5"), (13,9,"#B5B3F5"), (13,10,"#B5B3F5"), (13,11,"#B5B3F5"), (13,12,"#B5B3F5"), (13,13,"#B5B3F5"), (13,14,"#B5B3F5"), (13,15,"#B5B3F5"), (13,16,"#B5B3F5"), (13,17,"#B5B3F5"), (13,18,"#B5B3F5"), (13,19,"#FFFFFF"), (14,4,"#FFFFFF"), (14,5,"#B5B3F5"), (14,6,"#B5B3F5"), (14,7,"#B5B3F5"), (14,8,"#B5B3F5"), (14,9,"#B5B3F5"), (14,10,"#B5B3F5"), (14,11,"#B5B3F5"), (14,12,"#B5B3F5"), (14,13,"#B5B3F5"), (14,14,"#B5B3F5"), (14,15,"#B5B3F5"), (14,16,"#B5B3F5"), (14,17,"#B5B3F5"), (14,18,"#B5B3F5"), (14,19,"#FFFFFF"), (15,4,"#FFFFFF"), (15,5,"#B5B3F5"), (15,6,"#B5B3F5"), (15,7,"#B5B3F5"), (15,8,"#B5B3F5"), (15,9,"#B5B3F5"), (15,10,"#B5B3F5"), (15,11,"#B5B3F5"), (15,12,"#B5B3F5"), (15,13,"#B5B3F5"), (15,14,"#B5B3F5"), (15,15,"#B5B3F5"), (15,16,"#B5B3F5"), (15,17,"#B5B3F5"), (15,18,"#B5B3F5"), (15,19,"#FFFFFF"), (16,4,"#FFFFFF"), (16,5,"#B5B3F5"), (16,6,"#B5B3F5"), (16,7,"#B5B3F5"), (16,8,"#B5B3F5"), (16,9,"#B5B3F5"), (16,10,"#B5B3F5"), (16,11,"#B5B3F5"), (16,12,"#B5B3F5"), (16,13,"#B5B3F5"), (16,14,"#B5B3F5"), (16,15,"#B5B3F5"), (16,16,"#B5B3F5"), (16,17,"#B5B3F5"), (16,18,"#B5B3F5"), (16,19,"#FFFFFF"), (17,4,"#FFFFFF"), (17,5,"#B5B3F5"), (17,6,"#B5B3F5"), (17,7,"#B5B3F5"), (17,8,"#B5B3F5"), (17,9,"#B5B3F5"), (17,10,"#B5B3F5"), (17,11,"#B5B3F5"), (17,12,"#B5B3F5"), (17,13,"#B5B3F5"), (17,14,"#B5B3F5"), (17,15,"#B5B3F5"), (17,16,"#B5B3F5"), (17,17,"#B5B3F5"), (17,18,"#B5B3F5"), (17,19,"#FFFFFF"), (18,5,"#FFFFFF"), (18,6,"#B5B3F5"), (18,7,"#B5B3F5"), (18,8,"#B5B3F5"), (18,9,"#B5B3F5"), (18,10,"#B5B3F5"), (18,11,"#B5B3F5"), (18,12,"#B5B3F5"), (18,13,"#B5B3F5"), (18,14,"#B5B3F5"), (18,15,"#B5B3F5"), (18,16,"#B5B3F5"), (18,17,"#B5B3F5"), (18,18,"#FFFFFF"), (19,6,"#FFFFFF"), (19,7,"#FFFFFF"), (19,8,"#FFFFFF"), (19,9,"#FFFFFF"), (19,10,"#FFFFFF"), (19,11,"#FFFFFF"), (19,12,"#FFFFFF"), (19,13,"#FFFFFF"), (19,14,"#FFFFFF"), (19,15,"#FFFFFF"), (19,16,"#FFFFFF"), (19,17,"#FFFFFF")]


wallsize = 30  # put blocks in grid from (0,0) to (22,12)
def block(x,y,n): # make an nxn block at (x,y)
    myset = set()  # cannot use {} for emptyset, o/w it is a dictionary
    for i in range(n):
        for j in range(n):
            myset.add((x+i,y+j))
    return myset 

STEPD = 4 # speed of car. This changes dx,dy.

MAXx = 800
MAXy = 600
DOWNOFFSET = 100

STARTX = 0  # start location of car
STARTY = MAXy//2-10

LEVELSTART = 0   # change with start keys 1,2,3,...,9

# do not change these o/w leveleditor will not work correctly
popiscletype  = 1
strawberrytype = 2
chipstype = 3
icecreamtype = 4
strawberrytype = 5
cherrytype = 6
orangetype = 7
 # put blocks in grid from (0,0) to (22,12)

mainwin = Tk()
mainwin.geometry(str(MAXx)+"x"+str(MAXy)) 
canvas1 = Canvas(mainwin,width=MAXx,height= MAXy,bg="black")
canvas1.place(x=0,y=0)

# {...} is a set. Take union with {..} | {..}
walls0 = {(0,3),(1,3),(2,3),(3,3),(4,3),(5,3),(6,3),(7,3),(9,3),(8,3),(10,3),(11,3),(12,3),(13,3),(14,3),(15,3),(16,3),(17,3),(18,3),(19,3),(20,3),(21,3),(22,3),(23,3),(0,8),(1,8),(2,8),(3,8),(4,8),(5,8),(5,8),(6,8),(7,8),(8,8),(9,8),(10,8),(11,8),(12,8),(13,8),(14,8),(15,8),(16,8),(17,8),(18,8),(19,8),(20,8),(21,8),(22,8),(23,8)}
pointsset0 = {(5,5,1),(5,6,1),(7,5,5),(7,6,5),(9,5,3),(9,6,3),(11,5,4),(11,6,4),(13,5,6),(13,6,6),(15,5,7),(15,6,7)}


walls1 = {(7,1),(7,2),(7,3),(7,9),(7,10),(7,11),(7,12),(11,3),(12,3),(13,3),(14,3),(15,3),(16,3),(11,4),(12,5),(13,6),(15,7),(13,8),(12,9),(11,10),(11,11),(12,11),(13,11),(15,11),(14,11),(16,11),(17,11),(17,3),(14,6),(14,8)}
pointsset1 = {(5,1,3),(4,1,3),(5,12,3),(4,12,3),(4,6,1),(5,8,1),(7,6,1),(8,5,1),(10,5,1),(9,9,1),(9,11,1),(9,1,1),(13,1,1),(16,1,1),(19,1,1),(21,1,1),(21,11,1),(21,8,1),(21,4,1),(10,12,4),(10,11,4),(10,10,4),(16,6,3),(17,6,3),(18,6,3),(17,8,3),(16,9,3),(17,9,3),(2,12,1),(1,12,1),(0,12,1),(4,4,1),(4,10,1)}

walls2 = {(7,8),(9,8),(7,8),(8,8),(6,8),(10,8),(10,8),(11,8),(11,8),(13,8),(12,8),(14,8),(15,8),(16,8),(17,8),(18,8),(18,8),(19,8),(22,11),(22,10),(22,9),(22,8),(21,8),(20,8),(22,5),(22,7),(22,6),(22,4),(22,3),(22,2),(22,12),(21,12),(20,12),(18,12),(19,12),(17,12),(16,12),(15,12),(13,12),(14,12),(12,12),(11,12),(10,12),(10,12),(9,12),(8,12),(7,12),(6,12),(22,1),(22,0),(21,4),(20,4),(19,4),(17,4),(16,4),(18,4),(15,4),(14,4),(12,4),(13,4),(11,4),(9,4),(10,4),(8,4),(6,4),(7,4)}
pointsset2 = {(5,10,1),(7,10,1),(9,10,1),(10,10,1),(12,10,1),(14,10,1),(15,10,1),(17,10,1),(18,10,1),(21,10,4),(21,6,4),(21,2,3),(5,6,1),(9,6,1),(13,6,1),(10,2,1),(14,1,1),(16,2,1),(18,1,1),(17,6,4),(19,6,4),(15,6,4),(20,3,4),(20,2,4),(20,1,4),(19,2,4),(17,2,4),(18,2,4),(5,10,1),(7,10,1),(9,10,1),(10,10,1),(12,10,1),(14,10,1),(15,10,1),(17,10,1),(18,10,1),(21,10,4),(21,6,4),(21,2,3),(5,6,1),(9,6,1),(13,6,1),(10,2,1),(14,1,1),(16,2,1),(18,1,1),(17,6,4),(19,6,4),(15,6,4),(20,3,4),(20,2,4),(20,1,4),(19,2,4),(17,2,4),(18,2,4),(5,12,6),(5,0,7)}

walls3 = {(6,2),(7,3),(8,4),(8,5),(8,6),(8,7),(7,8),(6,9),(9,5),(9,6),(9,7),(9,4),(10,3),(17,4),(17,5),(17,6),(17,5),(16,5),(18,5),(11,2),(5,9),(12,2),(5,2),(10,8),(12,9),(11,9)}
pointsset3 = {(9,10,3),(9,9,3),(8,10,3),(8,9,3),(10,9,3),(10,10,3),(8,3,4),(9,3,4),(9,2,4),(10,2,4),(8,2,4),(8,2,4),(7,2,4),(8,1,4),(9,1,4),(21,2,1),(21,4,1),(21,6,1),(21,7,1),(21,9,1),(21,11,1),(19,12,1),(18,19,1),(12,12,1),(8,12,1),(5,12,1),(0,11,1),(0,9,1),(0,6,1),(0,3,1),(11,5,4),(11,6,4),(12,6,4),(12,5,4),(13,5,4),(13,6,4)}

wall4 = {(2,5),(2,7),(2,8),(3,9),(4,9),(5,8),(5,6),(5,7),(2,6),(5,5),(4,4),(3,4),(10,6),(10,7),(10,8),(9,7),(11,7),(15,7),(15,6),(15,5),(16,4),(17,4),(18,5),(18,6),(18,7),(16,9),(17,9),(15,8),(18,8)}
pointsset4 = {(8,11,3),(9,11,3),(10,11,3),(12,11,3),(6,1,1),(7,1,1),(9,1,1),(11,1,1),(12,1,1),(14,2,1),(14,1,1),(12,1,1),(10,1,1),(8,1,1),(7,2,1),(8,2,1),(9,2,1),(10,2,1),(11,2,1),(12,2,1),(21,6,3),(21,7,3),(21,8,3),(20,6,4),(20,7,4),(20,8,4),(22,6,4),(22,7,4),(22,8,4),(6,2,1),(13,1,1),(13,2,1),(11,11,3),(7,11,3),(20,5,4),(20,9,4),(22,9,4),(22,5,4),(20,4,4),(22,4,4),(21,9,3),(21,5,3),(14,7,4),(14,6,4),(6,6,4),(6,7,4),(6,8,4),(14,8,4),(6,5,4),(14,5,4)}



wallslist = [walls0,walls1,walls2,walls3,wall4]
pointslist = [pointsset0,pointsset1, pointsset2,pointsset3,pointsset4]

walls = wallslist[LEVELSTART]
pointsset = pointslist[LEVELSTART]

score = 0

ShowAllCollisions = False

HitWall = False
PlayerAlive = False

highscore = 0

def save_high_score(myhighscore, filename=""):
    filename="highscore"+str(LEVELSTART)+".txt"
    with open(filename, "w") as file:  # file is automatically closed when with block is completed
        file.write(str(myhighscore))

def load_high_score(filename=""):
    filename="highscore"+str(LEVELSTART)+".txt"
    try:
        with open(filename, "r") as file:  # file is automatically closed when with block is completed
            return int(file.read())
    except FileNotFoundError:
        return 0  # Default to 0 if no high score file exists
    
def on_close():
    save_high_score(highscore)  # Save score before exiting
    mainwin.destroy()  # Close the window
mainwin.protocol("WM_DELETE_WINDOW", on_close)  # Bind closing action

def rotatepoints(points,angle,center):
         newpoints = []
         anglerad = math.radians(angle)
         cx,cy = center
         for x,y,z in points:
              x = x - cx
              y = y - cy
              newx = x* math.cos(anglerad)- y*math.sin(anglerad) + cx
              newy = x * math.sin(anglerad) + y*math.cos(anglerad) + cy
              newpoints.append((newx,newy,z))
         return newpoints


class LEDobj:
    def __init__(self, canvas,x=0,y=0,dx=0,dy=0, CharPoints = [], pixelsize = 2, typestring = "unknown"):
         self.x = x
         self.y = y
         self.dx = dx
         self.dy = dy
         self.canvas = canvas
         self.typestring = typestring
         self.LEDPoints = []
         self.OriginalCharPoints = CharPoints
         self.CharPoints = CharPoints.copy()
         self.PointsType = 0
         self.collisionrect = (0,0,0,0)  # top left to bottom right
         self.collisionimage = 0
         self.collisionrectshow = False
         self.pixelsize = pixelsize
         LEDlib.psize = self.pixelsize
         LEDlib.createCharColourSolid(canvas,x,y,CharPoints,self.LEDPoints)
    def resetposition(self,x,y):
        self.x, self.y = x,y
        self.dx, self.dy = 0,0
        self.draw()
    def undraw(self):
         for p in self.LEDPoints:
            self.canvas.delete(p)
         self.LEDPoints.clear()
    def draw(self):
        self.undraw()
        LEDlib.psize = self.pixelsize
        LEDlib.createCharColourSolid(self.canvas,self.x,self.y,self.CharPoints,self.LEDPoints)
        if self.collisionrectshow:
              canvas1.delete(self.collisionimage)
              self.showcollisionrect() 
    def move(self): 
         self.x = self.x + self.dx
         self.y = self.y + self.dy
         if self.x > MAXx-48: self.x = MAXx-48
         if self.y > MAXy-48: self.y = MAXy-48
         if self.x < 0 : self.x = 0
         if self.y < 0 : self.y = 0
         self.draw()
    def rotate(self,angledeg):
         centerx = sum(x for x,y,z in self.OriginalCharPoints)/len(self.OriginalCharPoints)
         centery = sum(y for x,y,z in self.OriginalCharPoints)/len(self.OriginalCharPoints)
         self.CharPoints = rotatepoints(self.OriginalCharPoints,angle=angledeg,center=(centerx,centery))
         self.draw()
    def showcollisionrect(self):
         self.collisionrectshow = True
         x1,y1,x2,y2 = self.collisionrect 
         self.collisionimage = canvas1.create_rectangle(self.x+x1,self.y+y1,self.x+x2,self.y+y2,fill="", outline = "white") 
         
class LEDscoreobj:
    def __init__(self, canvas,x=0,y=0, score = 0, colour = "white", pixelsize = 2, charwidth=23, numzeros = 0, solid = False, bg = True):
         self.x = x
         self.y = y
         self.score = score
         self.canvas = canvas
         self.LEDPoints = []
         self.colour = colour
         self.pixelsize = pixelsize
         self.charwidth = charwidth
         self.numzeros = numzeros 
         self.solid = solid
         self.bg = bg
         self.draw()
    def draw(self):
        self.undraw()
        LEDlib.charwidth = self.charwidth
        LEDlib.psize = self.pixelsize
        LEDlib.ShowColourScore2(self.canvas,self.x,self.y,self.colour,self.score,self.LEDPoints, self.numzeros, self.solid, self.bg) 
    def undraw(self):
         for p in self.LEDPoints:
            self.canvas.delete(p)
         self.LEDPoints.clear()
    def update(self,myscore):
        self.score = myscore
        self.draw()

class LEDtextobj:
    def __init__(self, canvas,x=0,y=0, text = "", colour = "white", pixelsize = 2, charwidth=23, solid = False, bg = True):
         self.x = x
         self.y = y
         self.text = text
         self.canvas = canvas
         self.LEDPoints = []
         self.colour = colour
         self.pixelsize = pixelsize
         self.charwidth = charwidth
         self.solid = solid
         self.bg = bg
         self.draw()
    def draw(self):
        self.undraw()
        LEDlib.charwidth = self.charwidth
        LEDlib.psize = self.pixelsize
        LEDlib.ShowColourText2(self.canvas,self.x,self.y,self.colour,self.text,self.LEDPoints, self.solid, self.bg) 
    def undraw(self):
         for p in self.LEDPoints:
            self.canvas.delete(p)
         self.LEDPoints.clear()
    def update(self,mytext):
        self.text = mytext
        self.draw()




def checkcollisionrect(object1,object2):
     x1,y1,x2,y2 = object1.collisionrect 
     a1,b1,a2,b2 = object2.collisionrect
     x1 = x1 + object1.x
     y1 = y1 + object1.y
     x2 = x2 + object1.x
     y2 = y2 + object1.y 
     a1 = a1 + object2.x
     b1 = b1 + object2.y
     a2 = a2 + object2.x
     b2 = b2 + object2.y 
     if x2 < a1 or x1 > a2 or y2 < b1 or y1 > b2:
          return False
     else:
          return True



myship = LEDobj(canvas1,STARTX,STARTY,dx = 0,dy = 0,CharPoints=charRallyX, pixelsize = 2,typestring = "car")
myship.collisionrect = (4,3,44,45)
myship.rotate(90)
if ShowAllCollisions: myship.showcollisionrect()

fruitlist = []
solidlist = []
scoreddisplay = []
countdowndisplay = []

         
displayscore = LEDscoreobj(canvas1,x=210,y=10,score=0,colour="white",pixelsize=3, charwidth = 24,numzeros=5)
displaytextscore = LEDtextobj(canvas1,x=235,y=35,text="SCORE",colour="yellow",pixelsize = 2, charwidth=14, solid = True)

displayhighscore = LEDscoreobj(canvas1,x=MAXx-121,y=10,score=highscore,colour="white",pixelsize=3, charwidth = 24,numzeros=5)
displaytexthighscore = LEDtextobj(canvas1,x=MAXx-105,y=35,text="HISCORE",colour="yellow",pixelsize = 2, charwidth=14, solid = True)

dlx = 50
displaylevel = LEDscoreobj(canvas1,x=MAXx//2+20+dlx,y=10,score=LEVELSTART,colour="white",pixelsize=3, charwidth = 24,numzeros=0)
displaytextlevel = LEDtextobj(canvas1,x=MAXx//2+dlx,y=35,text="LEVEL",colour="yellow",pixelsize = 2, charwidth=14, solid = True)


starttime = time.time()

displayclock = LEDscoreobj(canvas1,x=10,y=10,score=7,colour="light green",pixelsize=6, charwidth = 24,numzeros=0)
displayclocktext = LEDtextobj(canvas1,x=54,y=30,text="SECONDS",colour="light green",pixelsize = 3, charwidth=18)



def makewalls():
    for x,y in walls:
        wall = LEDobj(canvas1,x*wallsize-8,y*wallsize-8+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charWall2, pixelsize = 2,typestring = "solid")
        wall.collisionrect = (8,8,40,40)
        solidlist.append(wall) 

def createplayfield():
   makewalls()
   for x,y,stype in pointsset:
       if stype == popiscletype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charPopsicle, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (0,0,16,36)
           fruit.PointsType = 100
           fruitlist.append(fruit)
       if stype == strawberrytype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charPacmanStrawberry, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (0,6,22,30)
           fruit.PointsType = 200
           #fruit.showcollisionrect()
           fruitlist.append(fruit)
       if stype == chipstype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charChips, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (0,0,22,32)
           fruit.PointsType = 300
           #fruit.showcollisionrect()
           fruitlist.append(fruit)
       if stype == icecreamtype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charIceCream, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (0,0,17,32)
           fruit.PointsType = 400
           #fruit.showcollisionrect()
           fruitlist.append(fruit)
       if stype == cherrytype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charPacmanCherry, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (0,4,24,28)
           fruit.PointsType = 500
           #fruit.showcollisionrect()
           fruitlist.append(fruit)
       if stype == orangetype:
           fruit = LEDobj(canvas1,x*wallsize+8,y*wallsize+DOWNOFFSET,dx = 0,dy = 0,CharPoints=charOrange, pixelsize = 2,typestring = "fruit")
           fruit.collisionrect = (2,0,29,32)
           fruit.PointsType = 600
           #fruit.showcollisionrect()
           fruitlist.append(fruit)
       

def eraseplayfield():
    for itemlist in (fruitlist, solidlist, scoreddisplay):
        for item in itemlist:
           item.undraw()
        itemlist.clear()
    
  

createplayfield()

def updateclock():
    global PlayerAlive
    if PlayerAlive:
       seconds = time.time()-starttime
       if seconds <= 7.1 and PlayerAlive : 
         displayclock.update(int(abs(7.9-seconds)))
       else:
         PlayerAlive = False
         save_high_score(highscore)
       if seconds >= 4 : displayclock.colour = "red"
    mainwin.after(100,updateclock)

updateclock()

def gameloop():
    global HitWall, score, highscore 
    if LEVELSTART == 0: myship.dx = 2
    if PlayerAlive or LEVELSTART == 0: myship.move()
    for fruit in fruitlist:
       if checkcollisionrect(myship,fruit):
            pointsawarded = LEDscoreobj(canvas1,x=fruit.x-7,y=fruit.y+10,score=fruit.PointsType,colour="yellow",pixelsize=2, charwidth = 15, solid = True, bg = False)
            scoreddisplay.append(pointsawarded)
            fruit.undraw()
            fruitlist.remove(fruit)
            score = score + fruit.PointsType
            if score > highscore: 
                highscore = score
                displayhighscore.update(highscore)
            displayscore.update(score)
    for solid in solidlist:
         if checkcollisionrect(myship,solid): 
            if not HitWall:
              myship.x = myship.x - myship.dx
              myship.y = myship.y - myship.dy
            myship.dx = 0
            myship.dy = 0
            HitWall = True
            break # exit the for loop
    mainwin.after(10,gameloop)

def startgame():
    global starttime
    starttime = time.time()

def setlevel():
    global walls,pointsset,score, highscore
    eraseplayfield()
    walls = wallslist[LEVELSTART]
    pointsset = pointslist[LEVELSTART]
    createplayfield()
    myship.resetposition(STARTX,STARTY)
    score = 0
    highscore = load_high_score()
    displayclock.colour = "lightgreen"
    displayhighscore.update(highscore)
    displayscore.update(score)
    displayclock.update(7)

setlevel()
startgame()
gameloop()
counttime = time.time()


displaycountdown = LEDscoreobj(canvas1,x=MAXx//4,y=MAXy//4,score=3,colour="orange",pixelsize=50, charwidth = 24,numzeros=0, solid = False, bg = False)
displaycountdown.undraw()

def countdown():
    global displaycountdown, PlayerAlive
    if (time.time() - counttime <= 3.1) and LEVELSTART > 0:
           displaycountdown.update(3-int((time.time()-counttime)))
           mainwin.after(500,countdown)    
    else:
           displaycountdown.undraw()
           if LEVELSTART > 0 : PlayerAlive = True
           startgame()
       

def mykey(event):
    global HitWall, PlayerAlive, starttime,score, highscore,walls,pointsset, LEVELSTART, counttime
    key = event.keysym
    if key in ["0","1","2","3","4"]:
        PlayerAlive = False
        myship.rotate(90)
        myship.dy = 0
        myship.dx = STEPD
        displayclock.colour = "lightgreen"
        displayclock.update(7)
        LEVELSTART = int(key)
        displaylevel.update(LEVELSTART)
        setlevel()
        counttime = time.time()
        countdown()
    if HitWall:
         HitWall = False
    elif (key == "w" or key == "Up") and LEVELSTART > 0:
         myship.rotate(0)
         myship.dy = -STEPD
         myship.dx = 0
    elif (key == "d" or key == "Right") and LEVELSTART > 0:
         myship.rotate(90)
         myship.dy = 0
         myship.dx = STEPD
    elif (key == "a" or key == "Left") and LEVELSTART > 0:
         myship.rotate(270)
         myship.dy = 0
         myship.dx = -STEPD
    elif (key == "s" or key == "Down") and LEVELSTART > 0:
         myship.rotate(180)
         myship.dy = STEPD
         myship.dx = 0


mainwin.bind("<KeyPress>", mykey)
mainwin.mainloop()